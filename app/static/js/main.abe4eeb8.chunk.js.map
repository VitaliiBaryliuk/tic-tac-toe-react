{"version":3,"sources":["tic-tac-toe/GameCell.js","TicTacToeData.js","tic-tac-toe/GameField.js","tic-tac-toe/TicTacToe.js","App.js","serviceWorker.js","index.js"],"names":["GameCell","_this","this","react_default","a","createElement","onClick","props","callback","cell","cellNum","className","value","Component","ticTacToeData","GameField","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","currentPlayer","stepCounter","winStatus","cellData","cellClicked","bind","assertThisInitialized","refreshGame","nextPlayer","activeCell","find","Number","newData","setState","prevState","checkWin","_this2","conditions","0","1","2","3","4","5","6","7","stateWin","counter","map","winCellNum","forEach","_this3","GameCell_GameCell","key","TicTacToe","tic_tac_toe_GameField","App","tic_tac_toe_TicTacToe","Boolean","window","location","hostname","match","ReactDOM","render","src_App_1","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.abe4eeb8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class GameCell extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div \r\n        onClick={() => this.props.callback(this.props.cell.cellNum)}\r\n        className=\"tic-tac-toe__cell\" \r\n      >\r\n        {this.props.cell.value} \r\n      </div>\r\n    );\r\n  }\r\n}\r\n","const ticTacToeData = [\r\n  {\r\n    cellNum: 0,\r\n    value: null,\r\n  },\r\n  {\r\n    cellNum: 1,\r\n    value: null,\r\n  },\r\n  {\r\n    cellNum: 2,\r\n    value: null,\r\n  },\r\n  {\r\n    cellNum: 3,\r\n    value: null,\r\n  },\r\n  {\r\n    cellNum: 4,\r\n    value: null,\r\n  },\r\n  {\r\n    cellNum: 5,\r\n    value: null,\r\n  },\r\n  {\r\n    cellNum: 6,\r\n    value: null,\r\n  },\r\n  {\r\n    cellNum: 7,\r\n    value: null,\r\n  },\r\n  {\r\n    cellNum: 8,\r\n    value: null,\r\n  },\r\n];\r\n\r\nexport default ticTacToeData;","import React, { Component } from 'react';\r\n\r\nimport GameCell from './GameCell.js';\r\nimport ticTacToeData from '../TicTacToeData.js';\r\n\r\nclass GameField extends Component {\r\n  constructor() {\r\n    super()\r\n\r\n    this.state = {\r\n      currentPlayer: 'X',\r\n      stepCounter: 0,\r\n      winStatus: false,\r\n      cellData: ticTacToeData, \r\n    }\r\n\r\n    this.cellClicked = this.cellClicked.bind(this)\r\n    this.refreshGame = this.refreshGame.bind(this)\r\n  }\r\n\r\n  async cellClicked(cellNum) {\r\n    if(this.state.winStatus) {\r\n      return\r\n    }\r\n\r\n    let nextPlayer = this.state.currentPlayer === 'X' ? 'O' : 'X';\r\n    let activeCell = this.state.cellData.find(cell => cell.cellNum === Number(cellNum));\r\n    activeCell.value = !activeCell.value ? this.state.currentPlayer : activeCell.value;\r\n    let newData = this.state.cellData\r\n\r\n    this.setState((prevState) => {\r\n      return {\r\n        stepCounter: prevState.stepCounter + 1,\r\n        cellData: newData,\r\n      }\r\n    })  \r\n\r\n    await this.checkWin() \r\n\r\n    if(!this.state.winStatus) {\r\n      this.setState({\r\n        currentPlayer: nextPlayer,\r\n      })   \r\n    } \r\n  }\r\n\r\n  checkWin() {\r\n    const conditions = {\r\n      0: [0, 1, 2],\r\n      1: [3, 4, 5],\r\n      2: [6, 7, 8],\r\n      3: [0, 3, 6],\r\n      4: [1, 4, 7],\r\n      5: [2, 5, 8],\r\n      6: [0, 4, 8],\r\n      7: [2, 4, 6],\r\n    };\r\n\r\n    for(let stateWin in conditions) {\r\n      let counter = 0;\r\n\r\n      conditions[stateWin].map(winCellNum => {\r\n        let currentCell = this.state.cellData.find(cell => cell.cellNum === winCellNum)\r\n\r\n          if (currentCell.value === this.state.currentPlayer) {\r\n            counter += 1\r\n          }   \r\n\r\n        })\r\n      if (counter === 3) {\r\n        this.setState({\r\n            winStatus: true,\r\n        })\r\n      } \r\n    }\r\n  } \r\n\r\n  refreshGame() {\r\n    ticTacToeData.forEach(cell => cell.value = null) \r\n\r\n    this.setState({\r\n      winStatus: false,\r\n      stepCounter: 0,\r\n      currentPlayer: 'X',\r\n      cellData: ticTacToeData\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.winStatus && <h1 className=\"tic-tac-toe__win-message\">{this.state.currentPlayer} WIN!</h1>}\r\n        {(!this.state.winStatus && this.state.stepCounter === 9) && <h1 className=\"tic-tac-toe__win-message\">DROW!</h1>}\r\n        <div className=\"tic-tac-toe__game-field\">\r\n          {this.state.cellData.map( cell => <GameCell  \r\n            key={cell.cellNum} \r\n            cell={cell}\r\n            callback={this.cellClicked} \r\n            /> )}\r\n        </div>\r\n        <button className=\"tic-tac-toe__refresh-button\" onClick={this.refreshGame}>Refresh game</button>\r\n      </div>  \r\n    );\r\n  }\r\n}\r\n\r\nexport default GameField;","import React, { Component } from 'react';\r\n\r\nimport GameField from './GameField.js';\r\n\r\nclass TicTacToe extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"tic-tac-toe\">\r\n        <GameField />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TicTacToe;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport './App.scss';\r\nimport TicTacToe from './tic-tac-toe/TicTacToe.js';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Tic-Tac-Toe</h1>\r\n        <TicTacToe />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}